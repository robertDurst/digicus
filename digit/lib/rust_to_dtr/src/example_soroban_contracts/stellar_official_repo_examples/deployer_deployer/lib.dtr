[Contract]: Deployer

[InternalFunctions]:
-() [deploy]
* Inputs:
{
env: Env
deployer: Address
wasm_hash: BytesN<32>
salt: BytesN<32>
init_fn: String
init_args: List<Val>
}
* Output: (Address, Val)
* Instructions:
$
{ instruction: evaluate, input: (env.current_contract_address), assign: BINARY_EXPRESSION_RIGHT, scope: 0 }
{ instruction: evaluate, input: (not_equal_to, deployer, BINARY_EXPRESSION_RIGHT), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 0 }
{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 1), scope: 0 }
{ instruction: evaluate, input: (deployer.require_auth), assign: Thing_to_return, scope: 1 }
{ instruction: Return, input: (Thing_to_return), scope: 1 }
{ instruction: evaluate, input: (env.deployer), assign: METHOD_CALL_EXPRESSION_4, scope: 0 }
{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_4.with_address, deployer, salt), assign: METHOD_CALL_EXPRESSION_1, scope: 0 }
{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_1.deploy, wasm_hash), assign: deployed_address, scope: 0 }
{ instruction: evaluate, input: (env.invoke_contract, deployed_address, init_fn, init_args), assign: res, scope: 0 }
{ instruction: create_tuple, input: (deployed_address, res), assign: Thing_to_return, scope: 0 }
{ instruction: Return, input: (Thing_to_return), scope: 0 }
$
:[InternalFunctions]


[User Defined Types]:
:[User Defined Types]