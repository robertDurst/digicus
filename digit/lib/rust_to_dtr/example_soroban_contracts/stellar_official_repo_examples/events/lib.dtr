[Contract]: IncrementContract

[Interface]:
-() [increment]
	* Inputs:
	{
		env: Env
	}
	* Output: Integer
	* Instructions:
		$
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_4, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_4.instance), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.get, COUNTER), assign: METHOD_CALL_EXPRESSION_1, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_1.unwrap_or, 0), assign: count, scope: 0 }
			{ instruction: add, input: (count, 1), assign: count, scope: 0 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_11, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_11.instance), assign: METHOD_CALL_EXPRESSION_10, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_10.set, COUNTER, count), scope: 0 }
			{ instruction: evaluate, input: (env.events), assign: METHOD_CALL_EXPRESSION_15, scope: 0 }
			{ instruction: instantiate_object, input: (Tuple, COUNTER, "increment"), assign: METHOD_CALL_ARG_1_13, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_15.publish, METHOD_CALL_ARG_1_13, count), scope: 0 }
			{ instruction: return, input: (count), scope: 0 }
		$
:[Interface]
[State]:
* [COUNTER]
	* Type: String
	* Initial Value: "COUNTER"
:[State]