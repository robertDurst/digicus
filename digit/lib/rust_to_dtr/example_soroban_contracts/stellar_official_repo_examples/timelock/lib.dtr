[Contract]: ClaimableBalanceContract

[Interface]:
-() [deposit]
	* Inputs:
	{
		env: Env
		from: Address
		token: Address
		amount: BigInteger
		claimants: List<Address>
		time_bound: TimeBound
	}
	* Instructions:
		$
			{ id: 5, instruction: evaluate, input: (claimants.len), assign: BINARY_EXPRESSION_LEFT_1, scope: 0 }
			{ id: 7, instruction: evaluate, input: (greater_than, BINARY_EXPRESSION_LEFT_1, 10), assign: CONDITIONAL_JUMP_ASSIGNMENT_0, scope: 0 }
			{ id: 9, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_0, 8), scope: 0 }
			{ id: 10, instruction: exit_with_message, input: ("too many claimants"), scope: 8 }
			{ id: 11, instruction: jump, input: (0), scope: 8 }
			{ id: 16, instruction: evaluate, input: (is_initialized, env), assign: CONDITIONAL_JUMP_ASSIGNMENT_12, scope: 0 }
			{ id: 18, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_12, 17), scope: 0 }
			{ id: 19, instruction: exit_with_message, input: ("contract has been already initialized"), scope: 17 }
			{ id: 20, instruction: jump, input: (0), scope: 17 }
			{ id: 23, instruction: evaluate, input: (from.require_auth), scope: 0 }
			{ id: 37, instruction: evaluate, input: (token::Client::new, env, token), assign: METHOD_CALL_EXPRESSION_32, scope: 0 }
			{ id: 29, instruction: evaluate, input: (env.current_contract_address), assign: METHOD_CALL_ARG_2_26, scope: 0 }
			{ id: 38, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_32.transfer, from, METHOD_CALL_ARG_2_26, amount), scope: 0 }
			{ id: 52, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_49, scope: 0 }
			{ id: 53, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_49.instance), assign: METHOD_CALL_EXPRESSION_48, scope: 0 }
			{ id: 46, instruction: instantiate_object, input: (UDT, ClaimableBalance, token, amount, time_bound, claimants), assign: METHOD_CALL_ARG_2_41, scope: 0 }
			{ id: 54, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_48.set, DataKey::Balance, METHOD_CALL_ARG_2_41), scope: 0 }
			{ id: 64, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_61, scope: 0 }
			{ id: 65, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_61.instance), assign: METHOD_CALL_EXPRESSION_60, scope: 0 }
			{ id: 58, instruction: instantiate_object, input: (Tuple), assign: METHOD_CALL_ARG_2_57, scope: 0 }
			{ id: 66, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_60.set, DataKey::Init, METHOD_CALL_ARG_2_57), scope: 0 }
		$
-() [claim]
	* Inputs:
	{
		env: Env
		claimant: Address
	}
	* Instructions:
		$
			{ id: 2, instruction: evaluate, input: (claimant.require_auth), scope: 0 }
			{ id: 10, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ id: 11, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.instance), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ id: 12, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.get, DataKey::Balance), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ id: 13, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.unwrap), assign: claimable_balance|||ClaimableBalance, scope: 0 }
			{ id: 23, instruction: evaluate, input: (check_time_bound, env, claimable_balance.time_bound), assign: UNARY_ARGUMENT_15, scope: 0 }
			{ id: 24, instruction: evaluate, input: (!, UNARY_ARGUMENT_15), assign: CONDITIONAL_JUMP_ASSIGNMENT_14, scope: 0 }
			{ id: 26, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_14, 25), scope: 0 }
			{ id: 27, instruction: exit_with_message, input: ("time predicate is not fulfilled"), scope: 25 }
			{ id: 28, instruction: jump, input: (0), scope: 25 }
			{ id: 39, instruction: evaluate, input: (claimants.contains, claimant), assign: UNARY_ARGUMENT_34, scope: 0 }
			{ id: 40, instruction: evaluate, input: (!, UNARY_ARGUMENT_34), assign: CONDITIONAL_JUMP_ASSIGNMENT_33, scope: 0 }
			{ id: 42, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_33, 41), scope: 0 }
			{ id: 43, instruction: exit_with_message, input: ("claimant is not allowed to claim this balance"), scope: 41 }
			{ id: 44, instruction: jump, input: (0), scope: 41 }
			{ id: 64, instruction: evaluate, input: (token::Client::new, env, claimable_balance.token), assign: METHOD_CALL_EXPRESSION_56, scope: 0 }
			{ id: 48, instruction: evaluate, input: (env.current_contract_address), assign: METHOD_CALL_ARG_1_45, scope: 0 }
			{ id: 65, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_56.transfer, METHOD_CALL_ARG_1_45, claimant, claimable_balance.amount), scope: 0 }
			{ id: 72, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_69, scope: 0 }
			{ id: 73, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_69.instance), assign: METHOD_CALL_EXPRESSION_68, scope: 0 }
			{ id: 74, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_68.remove, DataKey::Balance), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey_ENUM)
{
	Init: ()
	Balance: ()
}

* (TimeBoundKind_ENUM)
{
	Before: ()
	After: ()
}
* (TimeBound_STRUCT)
{
	kind: TimeBoundKind
	timestamp: Integer
}
* (ClaimableBalance_STRUCT)
{
	token: Address
	amount: BigInteger
	claimants: List<Address>
	time_bound: TimeBound
}

:[User Defined Types]


[Helpers]:
-() [check_time_bound]
	* Inputs:
	{
		env: &Env
		time_bound: &TimeBound
	}
	* Output: Boolean
	* Instructions:
		$
			{ id: 3, instruction: evaluate, input: (env.ledger), assign: METHOD_CALL_EXPRESSION_0, scope: 0 }
			{ id: 4, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_0.timestamp), assign: ledger_timestamp, scope: 0 }
			{ id: 7, instruction: assign, input: (time_bound.kind), assign: Thing_to_compare_against, scope: 0 }
			{ id: 10, instruction: evaluate, input: (equal_to, time_bound.kind, TimeBoundKind::Before), assign: CONDITIONAL_JUMP_CHECK_9, scope: 0 }
			{ id: 12, instruction: jump, input: (CONDITIONAL_JUMP_CHECK_9, 11), scope: 0 }
			{ id: 23, instruction: evaluate, input: (equal_to, Thing_to_compare_against, TimeBoundKind::After), assign: CONDITIONAL_JUMP_CHECK_22, scope: 0 }
			{ id: 25, instruction: jump, input: (CONDITIONAL_JUMP_CHECK_22, 24), scope: 0 }
			{ id: 20, instruction: evaluate, input: (less_than_or_equal_to, ledger_timestamp, time_bound.timestamp), assign: Thing_to_return, scope: 11 }
			{ id: 21, instruction: jump, input: (0), scope: 11 }
			{ id: 33, instruction: evaluate, input: (greater_than_or_equal_to, ledger_timestamp, time_bound.timestamp), assign: Thing_to_return, scope: 24 }
			{ id: 34, instruction: jump, input: (0), scope: 24 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
-() [is_initialized]
	* Inputs:
	{
		env: &Env
	}
	* Output: Boolean
	* Instructions:
		$
			{ id: 6, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ id: 7, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.instance), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ id: 8, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.has, DataKey::Init), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$

:[Helpers]

