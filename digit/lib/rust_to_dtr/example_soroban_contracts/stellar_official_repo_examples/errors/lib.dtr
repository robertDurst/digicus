[Contract]: IncrementContract

[Interface]:
-() [increment]
	* Inputs:
	{
		env: Env
	}
	* Output: Integer
	* Instructions:
		$
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_4, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_4.instance), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.get, COUNTER), assign: METHOD_CALL_EXPRESSION_1, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_1.unwrap_or, 0), assign: count, scope: 0 }
			{ instruction: print, input: (env, "count: {}", count), scope: 0 }
			{ instruction: add, input: (count, 1), assign: count, scope: 0 }
			{ instruction: evaluate, input: (less_than_or_equal_to, count, MAX), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 0 }
			{ instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 1), assign: Thing_to_return, scope: 0 }
			{ instruction: jump, input: (100), assign: Thing_to_return, scope: 0 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_9, scope: 1 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_9.instance), assign: METHOD_CALL_EXPRESSION_8, scope: 1 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_8.set, COUNTER, count), scope: 1 }
			{ instruction: evaluate, input: (Ok, count), assign: Thing_to_return, scope: 1 }
			{ instruction: evaluate, input: (Err, Error::LimitReached), assign: Thing_to_return, scope: 100 }
			{ instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (Error)
{
	LimitReached = 1
}

:[User Defined Types]
[State]:
* [COUNTER]
	* Type: String
	* Initial Value: "COUNTER"
* [MAX]
	* Type: Integer
	* Initial Value: 5

