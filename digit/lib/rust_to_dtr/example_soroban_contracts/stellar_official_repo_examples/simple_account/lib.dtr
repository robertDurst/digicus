[Contract]: SimpleAccount

[Interface]:
-() [init]
	* Inputs:
	{
		env: Env
		public_key: ByteStringSmall
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.instance), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.has, DataKey::Owner), assign: CONDITIONAL_JUMP_ASSIGNMENT_0, scope: 0 }
			{ instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_0, 1), scope: 0 }
			{ instruction: exit_with_message, input: ("owner is already set"), scope: 1 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_8, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_8.instance), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.set, DataKey::Owner, public_key), scope: 0 }
		$
-() [__check_auth]
	* Inputs:
	{
		env: Env
		signature_payload: ByteStringSmall
		signature: ByteStringLarge
		_auth_context: List<Context>
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.instance), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.get, DataKey::Owner), assign: METHOD_CALL_EXPRESSION_0, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_0.unwrap), assign: public_key, scope: 0 }
			{ instruction: evaluate, input: (env.crypto), assign: METHOD_CALL_EXPRESSION_9, scope: 0 }
			{ instruction: evaluate, input: (signature_payload.into), assign: METHOD_CALL_ARG_2_6, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_9.ed25519_verify, public_key, METHOD_CALL_ARG_2_6, signature), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey_ENUM)
{
	Owner: ()
}

:[User Defined Types]