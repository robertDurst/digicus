[Contract]: Contract

[InternalFunctions]:
-() [init]
* Inputs:
{
env: Env
value: u32
}
* Instructions:
$
{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.instance), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.set, KEY, value), scope: 0 }
$
-() [value]
* Inputs:
{
env: Env
}
* Output: u32
* Instructions:
$
{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.instance), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.get, KEY), assign: METHOD_CALL_EXPRESSION_0, scope: 0 }
{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_0.unwrap), assign: Thing_to_return, scope: 0 }
{ instruction: Return, input: (Thing_to_return), scope: 0 }
$
:[InternalFunctions]

[User Defined Types]:
:[User Defined Types]
[State]:
* [KEY]
* Type: String
* Initial Value: "value"