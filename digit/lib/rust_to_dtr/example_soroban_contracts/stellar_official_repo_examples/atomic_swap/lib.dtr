[Contract]: AtomicSwapContract

[InternalFunctions]:
-() [swap]
	* Inputs:
	{
		env: Env
		a: Address
		b: Address
		token_a: Address
		token_b: Address
		amount_a: i128
		min_b_for_a: i128
		amount_b: i128
		min_a_for_b: i128
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (less_than, amount_b, min_b_for_a), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 0 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 1), scope: 0 }
			{ instruction: error_with_message, input: ("not enough token B for token A"), scope: 1 }
			{ instruction: evaluate, input: (less_than, amount_a, min_a_for_b), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 0 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 1), scope: 0 }
			{ instruction: error_with_message, input: ("not enough token A for token B"), scope: 1 }
			{ instruction: evaluate, input: (token_a.clone), assign: 1_TUPLE_ARG, scope: 0 }
			{ instruction: evaluate, input: (token_b.clone), assign: 2_TUPLE_ARG, scope: 0 }
			{ instruction: create_tuple, input: (1_TUPLE_ARG, 2_TUPLE_ARG, amount_a, min_b_for_a), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.into_val, env), assign: METHOD_CALL_ARG_1_0, scope: 0 }
			{ instruction: evaluate, input: (a.require_auth_for_args, METHOD_CALL_ARG_1_0), scope: 0 }
			{ instruction: evaluate, input: (token_b.clone), assign: 1_TUPLE_ARG, scope: 0 }
			{ instruction: evaluate, input: (token_a.clone), assign: 2_TUPLE_ARG, scope: 0 }
			{ instruction: create_tuple, input: (1_TUPLE_ARG, 2_TUPLE_ARG, amount_b, min_a_for_b), assign: METHOD_CALL_EXPRESSION_8, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_8.into_val, env), assign: METHOD_CALL_ARG_1_6, scope: 0 }
			{ instruction: evaluate, input: (b.require_auth_for_args, METHOD_CALL_ARG_1_6), scope: 0 }
			{ instruction: evaluate, input: (move_token, env, token_a, a, b, amount_a, min_a_for_b), scope: 0 }
			{ instruction: evaluate, input: (move_token, env, token_b, b, a, amount_b, min_b_for_a), scope: 0 }
		$
:[InternalFunctions]


[User Defined Types]:
:[User Defined Types]


[ExternalFunctions]:
-() [move_token]
	* Inputs:
	{
		env: &Env
		token: &Address
		from: &Address
		to: &Address
		max_spend_amount: i128
		transfer_amount: i128
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (token::Client::new, env, token), assign: token, scope: 0 }
			{ instruction: evaluate, input: (env.current_contract_address), assign: contract_address, scope: 0 }
			{ instruction: evaluate, input: (token.transfer, from, contract_address, max_spend_amount), scope: 0 }
			{ instruction: evaluate, input: (token.transfer, contract_address, to, transfer_amount), scope: 0 }
			{ instruction: subtract, input: (max_spend_amount, transfer_amount), assign: METHOD_CALL_ARG_3_12, scope: 0 }
			{ instruction: evaluate, input: (token.transfer, contract_address, from, METHOD_CALL_ARG_3_12), scope: 0 }
		$

:[ExternalFunctions]

