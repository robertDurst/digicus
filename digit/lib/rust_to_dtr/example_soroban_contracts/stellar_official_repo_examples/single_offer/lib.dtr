[Contract]: SingleOffer

[Interface]:
-() [create]
	* Inputs:
	{
		e: Env
		seller: Address
		sell_token: Address
		buy_token: Address
		sell_price: Integer
		buy_price: Integer
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (e.storage), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.instance), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.has, DataKey::Offer), assign: CONDITIONAL_JUMP_ASSIGNMENT_0, scope: 0 }
			{ instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_0, 1), scope: 0 }
			{ instruction: exit_with_message, input: ("offer is already created"), scope: 1 }
			{ instruction: evaluate, input: (equal_to, buy_price, 0), assign: BINARY_EXPRESSION_LEFT_6, scope: 0 }
			{ instruction: evaluate, input: (equal_to, sell_price, 0), assign: BINARY_EXPRESSION_RIGHT_7, scope: 0 }
			{ instruction: or, input: (BINARY_EXPRESSION_LEFT_6, BINARY_EXPRESSION_RIGHT_7), assign: CONDITIONAL_JUMP_ASSIGNMENT_5, scope: 0 }
			{ instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_5, 1), scope: 0 }
			{ instruction: exit_with_message, input: ("zero price is not allowed"), scope: 1 }
			{ instruction: evaluate, input: (seller.require_auth), scope: 0 }
			{ instruction: instantiate_object, input: (UDT, Offer, seller, sell_token, buy_token, sell_price, buy_price), assign: CALL_EXPRESSION_ARG_2, scope: 0 }
			{ instruction: evaluate, input: (write_offer, e, CALL_EXPRESSION_ARG_2), scope: 0 }
		$
-() [trade]
	* Inputs:
	{
		e: Env
		buyer: Address
		buy_token_amount: BigInteger
		min_sell_token_amount: BigInteger
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (buyer.require_auth), scope: 0 }
			{ instruction: evaluate, input: (load_offer, e), assign: offer, scope: 0 }
			{ instruction: evaluate, input: (token::Client::new, e, offer.sell_token), assign: sell_token_client, scope: 0 }
			{ instruction: evaluate, input: (token::Client::new, e, offer.buy_token), assign: buy_token_client, scope: 0 }
			{ instruction: evaluate, input: (buy_token_amount.checked_mul, offer.sell_price), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.unwrap_optimized), assign: BINARY_EXPRESSION_LEFT_4, scope: 0 }
			{ instruction: divide, input: (BINARY_EXPRESSION_LEFT_4, offer.buy_price), assign: sell_token_amount, scope: 0 }
			{ instruction: evaluate, input: (less_than, sell_token_amount, min_sell_token_amount), assign: CONDITIONAL_JUMP_ASSIGNMENT_9, scope: 0 }
			{ instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_9, 1), scope: 0 }
			{ instruction: exit_with_message, input: ("price is too low"), scope: 1 }
			{ instruction: evaluate, input: (e.current_contract_address), assign: contract, scope: 0 }
			{ instruction: evaluate, input: (buy_token_client.transfer, buyer, contract, buy_token_amount), scope: 0 }
			{ instruction: evaluate, input: (sell_token_client.transfer, contract, buyer, sell_token_amount), scope: 0 }
			{ instruction: evaluate, input: (buy_token_client.transfer, contract, offer.seller, buy_token_amount), scope: 0 }
		$
-() [withdraw]
	* Inputs:
	{
		e: Env
		token: Address
		amount: BigInteger
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (load_offer, e), assign: offer, scope: 0 }
			{ instruction: evaluate, input: (offer.seller.require_auth), scope: 0 }
			{ instruction: evaluate, input: (token::Client::new, e, token), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ instruction: evaluate, input: (e.current_contract_address), assign: METHOD_CALL_ARG_1_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.transfer, METHOD_CALL_ARG_1_2, offer.seller, amount), scope: 0 }
		$
-() [updt_price]
	* Inputs:
	{
		e: Env
		sell_price: Integer
		buy_price: Integer
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (equal_to, buy_price, 0), assign: BINARY_EXPRESSION_LEFT_1, scope: 0 }
			{ instruction: evaluate, input: (equal_to, sell_price, 0), assign: BINARY_EXPRESSION_RIGHT_2, scope: 0 }
			{ instruction: or, input: (BINARY_EXPRESSION_LEFT_1, BINARY_EXPRESSION_RIGHT_2), assign: CONDITIONAL_JUMP_ASSIGNMENT_0, scope: 0 }
			{ instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_0, 1), scope: 0 }
			{ instruction: exit_with_message, input: ("zero price is not allowed"), scope: 1 }
			{ instruction: evaluate, input: (load_offer, e), assign: offer, scope: 0 }
			{ instruction: evaluate, input: (offer.seller.require_auth), scope: 0 }
			{ instruction: assign, input: (sell_price), assign: offer.sell_price, scope: 0 }
			{ instruction: assign, input: (buy_price), assign: offer.buy_price, scope: 0 }
			{ instruction: evaluate, input: (write_offer, e, offer), scope: 0 }
		$
-() [get_offer]
	* Inputs:
	{
		e: Env
	}
	* Output: Offer
	* Instructions:
		$
			{ instruction: evaluate, input: (load_offer, e), assign: Thing_to_return, scope: 0 }
			{ instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey_ENUM)
{
	Offer: ()
}
* (Offer_STRUCT)
{
	seller: Address
	sell_token: Address
	buy_token: Address
	sell_price: Integer
	buy_price: Integer
}

:[User Defined Types]


[Helpers]:
-() [load_offer]
	* Inputs:
	{
		e: &Env
	}
	* Output: Offer
	* Instructions:
		$
			{ instruction: evaluate, input: (e.storage), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.instance), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.get, DataKey::Offer), assign: METHOD_CALL_EXPRESSION_0, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_0.unwrap), assign: Thing_to_return, scope: 0 }
			{ instruction: return, input: (Thing_to_return), scope: 0 }
		$
-() [write_offer]
	* Inputs:
	{
		e: &Env
		offer: &Offer
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (e.storage), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.instance), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.set, DataKey::Offer, offer), scope: 0 }
		$

:[Helpers]
