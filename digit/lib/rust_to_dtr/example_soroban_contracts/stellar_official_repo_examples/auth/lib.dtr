[Contract]: IncrementContract

[Interface]:
-() [increment]
	* Inputs:
	{
		env: Env
		user: Address
		value: Integer
	}
	* Output: Integer
	* Instructions:
		$
			{ instruction: evaluate, input: (user.require_auth), scope: 0 }
			{ instruction: evaluate, input: (user.clone), assign: CALL_EXPRESSION_ARG_1, scope: 0 }
			{ instruction: evaluate, input: (DataKey::Counter, CALL_EXPRESSION_ARG_1), assign: key, scope: 0 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.persistent), assign: METHOD_CALL_EXPRESSION_5, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_5.get, key), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.unwrap_or_default), assign: count, scope: 0 }
			{ instruction: add, input: (count, value), assign: count, scope: 0 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_11, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_11.persistent), assign: METHOD_CALL_EXPRESSION_10, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_10.set, key, count), scope: 0 }
			{ instruction: return, input: (count), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey)
{
	Counter: (Address)
}

:[User Defined Types]