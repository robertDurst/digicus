[Contract]: AccountContract

[Interface]:
-() [init]
	* Inputs:
	{
		env: Env
		signers: List<BytesN<32>>
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (signers.iter), assign: signer, scope: 0 }
			{ instruction: label, input: (loop_0_top), scope: 0 }
			{ instruction: end_of_iteration_check, input: (signer), assign: CHECK_CONDITION_ASSIGNMENT, scope: 0 }
			{ instruction: conditional_goto, input: (CHECK_CONDITION_ASSIGNMENT, loop_0_exit), scope: 0 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.instance), assign: METHOD_CALL_EXPRESSION_5, scope: 0 }
			{ instruction: evaluate, input: (DataKey::Signer, signer), assign: METHOD_CALL_ARG_1_2, scope: 0 }
			{ instruction: create_tuple, input: (), assign: METHOD_CALL_ARG_2_4, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_5.set, METHOD_CALL_ARG_1_2, METHOD_CALL_ARG_2_4), scope: 0 }
			{ instruction: increment, input: (signer), scope: 0 }
			{ instruction: unconditional_goto, input: (loop_0_top), scope: 0 }
			{ instruction: label, input: (loop_0_exit), scope: 0 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_12, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_12.instance), assign: METHOD_CALL_EXPRESSION_11, scope: 0 }
			{ instruction: evaluate, input: (signers.len), assign: METHOD_CALL_ARG_2_9, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_11.set, DataKey::SignerCnt, METHOD_CALL_ARG_2_9), scope: 0 }
		$
-() [add_limit]
	* Inputs:
	{
		env: Env
		token: Address
		limit: i128
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (env.current_contract_address), assign: METHOD_CALL_EXPRESSION_0, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_0.require_auth), scope: 0 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_6, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_6.instance), assign: METHOD_CALL_EXPRESSION_5, scope: 0 }
			{ instruction: evaluate, input: (DataKey::SpendLimit, token), assign: METHOD_CALL_ARG_1_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_5.set, METHOD_CALL_ARG_1_2, limit), scope: 0 }
		$
:[Interface]
[Interface]:
-() [__check_auth]
	* Inputs:
	{
		env: Env
		signature_payload: BytesN<32>
		signatures: List<AccSignature>
		auth_context: List<Context>
	}
	* Output: Result<(), AccError>
	* Instructions:
		$
			{ instruction: evaluate, input: (authenticate, env, signature_payload, signatures), scope: 0 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_4, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_4.instance), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.get, DataKey::SignerCnt), assign: METHOD_CALL_EXPRESSION_1, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_1.unwrap), assign: tot_signers, scope: 0 }
			{ instruction: evaluate, input: (signatures.len), assign: BINARY_EXPRESSION_RIGHT, scope: 0 }
			{ instruction: evaluate, input: (equal_to, tot_signers, BINARY_EXPRESSION_RIGHT), assign: all_signed, scope: 0 }
			{ instruction: evaluate, input: (env.current_contract_address), assign: curr_contract, scope: 0 }
			{ instruction: evaluate, input: (Map::new, env), assign: spend_left_per_token, scope: 0 }
			{ instruction: evaluate, input: (auth_context.iter), assign: context, scope: 0 }
			{ instruction: label, input: (loop_9_top), scope: 0 }
			{ instruction: end_of_iteration_check, input: (context), assign: CHECK_CONDITION_ASSIGNMENT, scope: 0 }
			{ instruction: conditional_goto, input: (CHECK_CONDITION_ASSIGNMENT, loop_9_exit), scope: 0 }
			{ instruction: evaluate, input: (verify_authorization_policy, env, context, curr_contract, all_signed, spend_left_per_token), scope: 0 }
			{ instruction: increment, input: (context), scope: 0 }
			{ instruction: unconditional_goto, input: (loop_9_top), scope: 0 }
			{ instruction: label, input: (loop_9_exit), scope: 0 }
			{ instruction: create_tuple, input: (), assign: CALL_EXPRESSION_ARG_1, scope: 0 }
			{ instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1), assign: Thing_to_return, scope: 0 }
			{ instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]


[User Defined Types]:* (AccSignature)
{
	public_key: BytesN<32>
	signature: BytesN<64>
}

* (DataKey)
{
	SignerCnt: ()
	Signer: (BytesN<32>)
	SpendLimit: (Address)
}

* (AccError)
{
	NotEnoughSigners = 1
	NegativeAmount = 2
	BadSignatureOrder = 3
	UnknownSigner = 4
	InvalidContext = 5
}

:[User Defined Types]
[State]:
* [TRANSFER_FN]
	* Type: String
	* Initial Value: "transfer"


[Helpers]:
-() [authenticate]
	* Inputs:
	{
		env: &Env
		signature_payload: &BytesN<32>
		signatures: &List<AccSignature>
	}
	* Output: Result<(), AccError>
	* Instructions:
		$
			{ instruction: evaluate, input: (signatures.len), assign: RANGE_END_2, scope: 0 }
			{ instruction: create_range, input: (0, RANGE_END_2), assign: i, scope: 0 }
			{ instruction: label, input: (loop_0_top), scope: 0 }
			{ instruction: end_of_iteration_check, input: (i), assign: CHECK_CONDITION_ASSIGNMENT, scope: 0 }
			{ instruction: conditional_goto, input: (CHECK_CONDITION_ASSIGNMENT, loop_0_exit), scope: 0 }
			{ instruction: evaluate, input: (signatures.get_unchecked, i), assign: signature, scope: 0 }
			{ instruction: evaluate, input: (greater_than, i, 0), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 0 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 1), scope: 0 }
			{ instruction: subtract, input: (i, 1), assign: METHOD_CALL_ARG_1_6, scope: 1 }
			{ instruction: evaluate, input: (signatures.get_unchecked, METHOD_CALL_ARG_1_6), assign: prev_signature, scope: 1 }
			{ instruction: field, input: (prev_signature, public_key), assign: BINARY_EXPRESSION_LEFT, scope: 1 }
			{ instruction: field, input: (signature, public_key), assign: BINARY_EXPRESSION_RIGHT, scope: 1 }
			{ instruction: evaluate, input: (greater_than_or_equal_to, BINARY_EXPRESSION_LEFT, BINARY_EXPRESSION_RIGHT), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 1 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 2), scope: 1 }
			{ instruction: evaluate, input: (Err, AccError::BadSignatureOrder), assign: RETURN_VALUE_LABEL, scope: 2 }
			{ instruction: return, input: (RETURN_VALUE_LABEL), scope: 2 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_14, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_14.instance), assign: METHOD_CALL_EXPRESSION_13, scope: 0 }
			{ instruction: field, input: (signature, public_key), assign: METHOD_CALL_EXPRESSION_11, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_11.clone), assign: CALL_EXPRESSION_ARG_1, scope: 0 }
			{ instruction: evaluate, input: (DataKey::Signer, CALL_EXPRESSION_ARG_1), assign: METHOD_CALL_ARG_1_10, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_13.has, METHOD_CALL_ARG_1_10), assign: UNARY_ARGUMENT_9, scope: 0 }
			{ instruction: evaluate, input: (!, UNARY_ARGUMENT_9), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 0 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 1), scope: 0 }
			{ instruction: evaluate, input: (Err, AccError::UnknownSigner), assign: RETURN_VALUE_LABEL, scope: 1 }
			{ instruction: return, input: (RETURN_VALUE_LABEL), scope: 1 }
			{ instruction: evaluate, input: (env.crypto), assign: METHOD_CALL_EXPRESSION_22, scope: 0 }
			{ instruction: field, input: (signature, public_key), assign: METHOD_CALL_ARG_1_17, scope: 0 }
			{ instruction: evaluate, input: (signature_payload.clone), assign: METHOD_CALL_EXPRESSION_19, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_19.into), assign: METHOD_CALL_ARG_2_18, scope: 0 }
			{ instruction: field, input: (signature, signature), assign: METHOD_CALL_ARG_3_21, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_22.ed25519_verify, METHOD_CALL_ARG_1_17, METHOD_CALL_ARG_2_18, METHOD_CALL_ARG_3_21), scope: 0 }
			{ instruction: increment, input: (i), scope: 0 }
			{ instruction: unconditional_goto, input: (loop_0_top), scope: 0 }
			{ instruction: label, input: (loop_0_exit), scope: 0 }
			{ instruction: create_tuple, input: (), assign: CALL_EXPRESSION_ARG_1, scope: 0 }
			{ instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1), assign: Thing_to_return, scope: 0 }
			{ instruction: return, input: (Thing_to_return), scope: 0 }
		$
-() [verify_authorization_policy]
	* Inputs:
	{
		env: &Env
		context: &Context
		curr_contract: &Address
		all_signed: Boolean
		spend_left_per_token: &Map<Address, i128>
	}
	* Output: Result<(), AccError>
	* Instructions:
		$
			{ instruction: evaluate, input: (equal_to, context, TupleStruct), assign: CONDITIONAL_JUMP_CHECK_100, scope: 0 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_CHECK_100, 100), scope: 0 }
			{ instruction: field, input: (c, contract), assign: BINARY_EXPRESSION_LEFT, scope: 100 }
			{ instruction: evaluate, input: (equal_to, BINARY_EXPRESSION_LEFT, curr_contract), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 100 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 101), scope: 100 }
			{ instruction: evaluate, input: (!, all_signed), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 101 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 102), assign: Thing_to_return, scope: 101 }
			{ instruction: evaluate, input: (Err, AccError::NotEnoughSigners), assign: RETURN_VALUE_LABEL, scope: 102 }
			{ instruction: return, input: (RETURN_VALUE_LABEL), assign: Thing_to_return, scope: 102 }
			{ instruction: evaluate, input: (equal_to, context, TupleStruct), assign: CONDITIONAL_JUMP_CHECK_200, scope: 0 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_CHECK_200, 200), scope: 0 }
			{ instruction: evaluate, input: (Err, AccError::InvalidContext), assign: RETURN_VALUE_LABEL, scope: 200 }
			{ instruction: return, input: (RETURN_VALUE_LABEL), assign: contract_context, scope: 200 }
			{ instruction: field, input: (contract_context, fn_name), assign: BINARY_EXPRESSION_LEFT, scope: 0 }
			{ instruction: evaluate, input: (not_equal_to, BINARY_EXPRESSION_LEFT, TRANSFER_FN), assign: BINARY_EXPRESSION_LEFT, scope: 0 }
			{ instruction: field, input: (contract_context, fn_name), assign: BINARY_EXPRESSION_LEFT, scope: 0 }
			{ instruction: evaluate, input: (Symbol::new, env, "approve"), assign: BINARY_EXPRESSION_RIGHT, scope: 0 }
			{ instruction: evaluate, input: (not_equal_to, BINARY_EXPRESSION_LEFT, BINARY_EXPRESSION_RIGHT), assign: BINARY_EXPRESSION_RIGHT, scope: 0 }
			{ instruction: and, input: (BINARY_EXPRESSION_LEFT, BINARY_EXPRESSION_RIGHT), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 0 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 1), scope: 0 }
			{ instruction: create_tuple, input: (), assign: CALL_EXPRESSION_ARG_1, scope: 1 }
			{ instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1), assign: RETURN_VALUE_LABEL, scope: 1 }
			{ instruction: return, input: (RETURN_VALUE_LABEL), assign: Thing_to_return, scope: 1 }
			{ instruction: field, input: (contract_context, contract), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.clone), assign: METHOD_CALL_ARG_1_6, scope: 0 }
			{ instruction: evaluate, input: (spend_left_per_token.get, METHOD_CALL_ARG_1_6), assign: INPUT_VALUE_NAME_FOR_LET_5, scope: 0 }
			{ instruction: conditional_jump, input: (INPUT_VALUE_NAME_FOR_LET_5, 1), assign: spend_left, scope: 0 }
			{ instruction: unconditional_jump, input: (100), assign: spend_left, scope: 0 }
			{ instruction: evaluate, input: (Some, spend_left), assign: Thing_to_return, scope: 1 }
			{ instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_15, scope: 100 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_15.instance), assign: METHOD_CALL_EXPRESSION_14, scope: 100 }
			{ instruction: field, input: (contract_context, contract), assign: METHOD_CALL_EXPRESSION_12, scope: 100 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_12.clone), assign: CALL_EXPRESSION_ARG_1, scope: 100 }
			{ instruction: evaluate, input: (DataKey::SpendLimit, CALL_EXPRESSION_ARG_1), assign: METHOD_CALL_ARG_1_11, scope: 100 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_14.get, METHOD_CALL_ARG_1_11), assign: INPUT_VALUE_NAME_FOR_LET_10, scope: 100 }
			{ instruction: conditional_jump, input: (INPUT_VALUE_NAME_FOR_LET_10, 101), assign: else_branch, scope: 100 }
			{ instruction: unconditional_jump, input: (200), assign: else_branch, scope: 100 }
			{ instruction: evaluate, input: (Some, limit_left), assign: Thing_to_return, scope: 101 }
			{ instruction: assign, input: (spend_left), assign: INPUT_VALUE_NAME_FOR_LET_18, scope: 0 }
			{ instruction: conditional_jump, input: (INPUT_VALUE_NAME_FOR_LET_18, 1), scope: 0 }
			{ instruction: field, input: (contract_context, args), assign: METHOD_CALL_EXPRESSION_24, scope: 1 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_24.get, 2), assign: METHOD_CALL_EXPRESSION_22, scope: 1 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_22.unwrap), assign: METHOD_CALL_EXPRESSION_21, scope: 1 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_21.try_into_val, env), assign: METHOD_CALL_EXPRESSION_19, scope: 1 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_19.unwrap), assign: spent, scope: 1 }
			{ instruction: evaluate, input: (less_than, spent, 0), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 1 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 2), scope: 1 }
			{ instruction: evaluate, input: (Err, AccError::NegativeAmount), assign: RETURN_VALUE_LABEL, scope: 2 }
			{ instruction: return, input: (RETURN_VALUE_LABEL), assign: Thing_to_return, scope: 2 }
			{ instruction: evaluate, input: (!, all_signed), assign: BINARY_EXPRESSION_LEFT, scope: 1 }
			{ instruction: evaluate, input: (greater_than, spent, spend_left), assign: BINARY_EXPRESSION_RIGHT, scope: 1 }
			{ instruction: and, input: (spent, BINARY_EXPRESSION_RIGHT), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 1 }
			{ instruction: conditional_jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 2), scope: 1 }
			{ instruction: evaluate, input: (Err, AccError::NotEnoughSigners), assign: RETURN_VALUE_LABEL, scope: 2 }
			{ instruction: return, input: (RETURN_VALUE_LABEL), assign: Thing_to_return, scope: 2 }
			{ instruction: field, input: (contract_context, contract), assign: METHOD_CALL_EXPRESSION_29, scope: 1 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_29.clone), assign: METHOD_CALL_ARG_1_28, scope: 1 }
			{ instruction: subtract, input: (spend_left, spent), assign: METHOD_CALL_ARG_2_30, scope: 1 }
			{ instruction: evaluate, input: (spend_left_per_token.set, METHOD_CALL_ARG_1_28, METHOD_CALL_ARG_2_30), assign: Thing_to_return, scope: 1 }
			{ instruction: create_tuple, input: (), assign: CALL_EXPRESSION_ARG_1, scope: 0 }
			{ instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1), assign: Thing_to_return, scope: 0 }
			{ instruction: return, input: (Thing_to_return), scope: 0 }
		$

:[Helpers]