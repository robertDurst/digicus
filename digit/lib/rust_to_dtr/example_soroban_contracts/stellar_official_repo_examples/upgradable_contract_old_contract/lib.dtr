[Contract]: UpgradeableContract

[Interface]:
-() [init]
	* Inputs:
	{
		e: Env
		admin: Address
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (e.storage), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.instance), assign: METHOD_CALL_EXPRESSION_1, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_1.has, DataKey::Admin), assign: CONDITIONAL_JUMP_ASSIGNMENT, scope: 0 }
			{ instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT, 1), scope: 0 }
			{ instruction: evaluate, input: (Err, Error::AlreadyInitialized), assign: RETURN_VALUE_LABEL, scope: 1 }
			{ instruction: return, input: (RETURN_VALUE_LABEL), assign: Thing_to_return, scope: 1 }
			{ instruction: evaluate, input: (e.storage), assign: METHOD_CALL_EXPRESSION_8, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_8.instance), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.set, DataKey::Admin, admin), scope: 0 }
			{ instruction: instantiate_object, input: (Tuple), assign: CALL_EXPRESSION_ARG_1, scope: 0 }
			{ instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1), assign: Thing_to_return, scope: 0 }
			{ instruction: return, input: (Thing_to_return), scope: 0 }
		$
-() [version]
	* Inputs:
	{
	}
	* Output: Integer
	* Instructions:
		$
			{ instruction: return, input: (1), scope: 0 }
		$
-() [upgrade]
	* Inputs:
	{
		e: Env
		new_wasm_hash: String
	}
	* Instructions:
		$
			{ instruction: evaluate, input: (e.storage), assign: METHOD_CALL_EXPRESSION_3, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_3.instance), assign: METHOD_CALL_EXPRESSION_2, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_2.get, DataKey::Admin), assign: METHOD_CALL_EXPRESSION_0, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_0.unwrap), assign: admin, scope: 0 }
			{ instruction: evaluate, input: (admin.require_auth), scope: 0 }
			{ instruction: evaluate, input: (e.deployer), assign: METHOD_CALL_EXPRESSION_7, scope: 0 }
			{ instruction: evaluate, input: (METHOD_CALL_EXPRESSION_7.update_current_contract_wasm, new_wasm_hash), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey)
{
	Admin: ()
}

* (Error)
{
	AlreadyInitialized = 1
}

:[User Defined Types]